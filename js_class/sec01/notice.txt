1) js01.js : 단순출력문 -> 브라우저-> 검사 -> 속성확인  

2) js02.js : 데이터 유형 
    Number,String,Boolean, Undefined, Null, Object, Array, Function ,Symbol 
    const(변수를 상수화  PI = 3.14), let,var  

3) js03 .js : 연산자  
산술연산자, 대입연산자, 비교연산자( ==, !=  ) , 논리 연산자 , 비트연산자,  삼항연산자[*]

논리 연산자(&&, ||)= true/false , 비트연산자 (and &, or | ) = 1 / 0    

ex)  2 && 7  = 7 ?          -> (false,true,null, Undefined)
 -> 왼쪽의 피연산자는 2는 'true'이다 . (0이 아닌 숫자는 true라고 간주한다.  )
    왼쪽에 있는 연산자가 true이고 논리 And 연산자는 오른쪽 피연산자를 평가한다  
    오른쪽 피연산자가 식의 결과로 리턴한다.  

ex)  7 && 2  =   2 
 -> 오른쪽  피연산자는  true '2' 로 연산되어 리턴된다.  

  // 논리곱일 경우 왼쪽에 있는 피연산자의 결과가 false  이면 나머지연산안하고 왼쪽피연산자의 값인 false를 리턴

ex)  0 &&  2 = 0   
-> 왼쪽 피연산는 '0' false  이다.  
   왼쪽에 있는 연산자가 false이고  논리 And 연산자는 오른쪽 연산자 평가 안하고 리턴한다.  

4)  제어문  if ~ else if  ~ else : 만일에  ~ 하면 
if(조건식) {  -------->조건식 true
    명령;
}  

if(조건식) {  -------->조건식 true
    명령;
}else{   -----------> 조건식 false

}

---------------------------
if(조건식1) {  -------->조건식 true
    명령1;
}else if(조건식2) {  -------->조건식 true
    명령2;
}else if(조건식3) {  -------->조건식 true
    명령3;
}else{   -----------> 조건식 false

}

5)js05.js  : 제어문_선택문  switch ~ case문
   - 하나의 switch 여러개의  case와 하나의 default를 가진다.  
   - case "값":는 정렬이 아니다.  
switch(변수(값)){
    case "값1":  명령1 ; [break;]
    case "값2":  명령2 ; [break;]
    case "값3":  명령3 ; [break;]
    default: 명령; break;
}

6)js06.js   : 제어문_반복문 while문
while(boolean){   -> 조건식의 결과가 true일때 명령을 수행한다. 
      명령;  
}


7)js07_while.js : 배열과 인덱스  

8)js08_for.js : 
초기값, 증가및 증감식은 여러개 ,로 나열이 가능하다.  
단, 조건식의 결과가 boolean 이어야 한다.  

for(초기값-1 ; 조건식-2 ; 증가및 증감식-4 ){
           명령어-3;
           }  
  1->2->3->4
     2->3->4
     2->3->4 조건식false가 되면 끝






     
