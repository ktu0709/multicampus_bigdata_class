<< 투영변환  :  k_perspectiveTransform.py >>

투영변환  :  3D 객체에서  2D 표면에 표현할 대상을 변환할 때 사용 (직선 투영, 원근 투영_ 카메라 렌즈에서 이미지 생성   )
     - 그래픽 3D 좌표를 2D로 변환할때

     -  카메라에서  3D 재구성할 때    :  (카메라 3D를 2D의 이미지로 투영)  + ovenCV =   재구성
                               = >  로봇공학 , 의료 이미징, 가상, 증강현실  ,  지리정보 시스템

     - 이미지 스티칭(image stitching): 두 개 이상의 연관된 이미지를 서로 겹치게 하여 하나의 패노라마
                                        이미지나 고해상도 이미지를 생성하는 과정

     [단계]  특징점 추출(Feature Detection) - > 특징점 매칭(Feature Matching)-> 이미지 정렬(Image Alignment)
            ->이미지 병합(Image Blending)

    - AR  : 가상객체를 실제 객체로 놓을 때
    - 기하학 교정  :  이미지 왜곡 제거하거나 특정 투영을 이용해서 이미지 교정할 때
    - 함수
       :   matrix(3x3 투영 변환 행렬) = cv2.getPerspectiveTransform(src, dst)
           src: 원본 이미지의 네 점을 나타내는 2D numpy 배열. 일반적으로 np.float32 데이터 타입이며, 크기는 (4, 2)
           dst: 출력 이미지에서 원본 이미지의 네 점이 이동할 좌표를 나타내는 2D numpy 배열

       : res= cv2.warpPerspective(src, matrix, (300, 300))
         res : 투영 변환이 적용된 이미지를 반환
==============================================================
<< 임계값 처리  : l_thresh.py >>
 : 이미지 처리중에 가장 많이 사용하는 처리방식
   0~ 255 중에서 127의 값을   깃점으로 127보다 작은 모두 0, 127보다 크면 255로 처리를 하게 된다.

이미지를 2진화 분류하는 작업 : 흰색과 검정으로 분류
        cv.threshold( 대상이미지, 임계값, 임계값 보다 큰값,  적용타입)   : 임계값 적용해서 대비 조정
        cv.threshold( src, thresh,    maxval,  type)
            type의 속성값들
            cv.THRESH_BINARY  : 픽셀값   IMG(X,Y)  thresh 값보다 크면  value,  작으면   0
            cv.THRESH_BINARY_INV: 픽셀값   IMG(X,Y)  thresh 값보다 크면  0,  작으면   value
            cv.THRESH_TRUNC :  픽셀값   IMG(X,Y)  thresh 값보다 크면  thresh,  작으면   픽셀값IMG(X,Y)
                -> 영상이 너무 밝은 부분을 줄인다 = 평탄화작업

            cv.THRESH_TOZERO : 픽셀값   IMG(X,Y)  thresh 값보다 크면  픽셀값 IMG(X,Y)  , 작으면 0으로 채움
                -> 임계값 이하는 0으로 채운다  = 특징강조 = 낮은 강도가 배경의 노이즈를 제거

            cv.THRESH_TOZERO_INV :  픽셀값   IMG(X,Y)  thresh 값보다 크면 0  , 작으면  픽셀값 IMG(X,Y)
                -> 임계값은 그대로 두고 임계 보다 밝은 값은 제거하는 목적

===============================================
<<  cv2에서 문서 , 이미지 대비 처리 또는 투영 변화가 되는 함수>>
 1. cvtColor() : 색공간 변화 함수

 2. GaussinanBlur() :  가우시안블러를 사용해서 노이즈(잡음)를 줄인다.

 3. threshold() : 임계값을 사용한  대비   ->  노이즈가 적고  객체와 배경의 명암 차이가 뚜렷할 때 사용 한다.
                                          ->객체 겹칩이 적고  객체의 개수가 많지 않을 경우 사용

 4. findCountours() :윤곽선을 찾아서 명함 또는 문서(대상)의 테두리를 감지 한다.
 5. warpPerspective () , getPerspectiveTransform () :  사각형 테두리 보정할 때 사용
 6. createCLAHE() : 히스토그램이미지(equalizeHist()) 대비개선을 구현했을 때를 대비
 7. drawCountours() : 윤곽선을 그릴때 사용

===============================================
g_reduce.py
reduce() : 이미지 차원 축소 _그레이 스케일 대상 = 밝기 정보만 추출 = 밝기 채널 하나
* 그래프에서 높은 부분은 해당 행에 밝은 픽셀이 많이 집중 되었다 (특정영역의 밝기 변화를 확인)

 --- 이미지 차원 축소를 하는 이유? : 리샘플링 , 피라미드 축소 ,주성분 분석(PCA)등
 1.계산 효율성 : 이미지 해상도를 줄이면 계산해야할 픽셀수가 감소된다
 2.메모리 사용량 감소
 3.노이즈 감소 후 일반화 : 노이즈가 감소 되면 중요한 특징이 강조 된다 -> 과적합 방지 도움
 4.특징추출 표현 간소화 -> 특징기반 분류,인식,검출 알고리즘 성능 향상
 5.웹,모바일,원격 감시 시스템등 데이터 전송 유리



