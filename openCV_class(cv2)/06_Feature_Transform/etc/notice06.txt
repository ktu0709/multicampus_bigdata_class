<< 1.pdf6 -> etc -> https://docs.opencv.org/4.9.0/da/d9b/group__features2d.html -> 코드 실행 >>
1. 템플릿 매칭:
OpenCV의 matchTemplate 메서드를 사용하여 원하는 반려견의 사진(템플릿)과 다른 사진들을 비교할 수 있다.
그러나 템플릿 매칭은 강아지의 포즈, 조명, 스케일 등이 크게 바뀌면 정확도가 떨어질 수 있다

2. 특징점 매칭:
SIFT, SURF, ORB 등의 알고리즘을 사용하여 각 이미지에서 특징점을 추출하고, 매칭을 통해 원하는 반려견을 찾을 수 있다.
 다양한 각도와 스케일에서도 상대적으로 잘 작동한다.
  -  SIFT(Scale-Invariant Feature Transform)  :
         이미지에서 특정지점을 찾는다. ( 가우시안 블러링 _ 이웃한 특징점과 스케일 차이를 구한다(DOG  )
         ->  키포인트 적용( 사이즈 , 앵글)  ( 특정지점중에 최소값, 최대값을 찾는다 )
        -> 방향 지정( 주변 픽셀에 그라디언트를 지정한다. )
        -> 이미지에 적용( Keypoint Descriptor 생성 -> KeyPoint Matching )

SURF  -> 필터링
  필터링 : 픽셀값을 조작해서 이미지 개선  _ 커널 또는 마스크라는 작은 행렬을 만들어서 이미지에 적용한다.
        노이즈 제거 , 경계선 감지 , 이미지 명암 조정

  종류 :  저주파필터 : 고 주파수를 제거해서 이미지부드럽게 (가우시안 블러, 평균필터 ) ,
          고주파필터:  저 주파수를 제거해서  경계선을 뚜렷하게(소벨, 라플라시안)

          밴드 패스: 특정 주파수 범위의 성분만을 통과시키고 나머지는 차단
          모폴로지 필터 :  형태학적 특성을 만들어서 특징을 강조하거나 단순화시키는 필터(침식, 팽창)

          메디안필터(Median) : 노이즈제거
          *추가 컨볼루션(Convolution)  , 상관연산등을 사용한다.

  ORM -> [BRIEF _ 바이너리문자열 생성 & FAST]
       : BRIEF _ 바이너리문자열 생성 -> 키 포인트의 방향 정보를 사용해서 회전불변하는 특성을 갖도록 한다
         키 포인트의 방향정보로 특징벡터의 패치로 스케일 조정 (31*31 , 48*48)


3. 머신 러닝 / 딥 러닝:
컨볼루션 신경망(CNN)과 같은 딥 러닝 알고리즘을 훈련시켜 특정 반려견을 인식할 수 있다.
정확하며 다양한 상황에서도 잘 작동할 수 있다.
하지만 많은 양의 레이블이 달린 데이터가 필요하며, 훈련에도 상당한 시간과 리소스가 필요하다.

4. 색상, 형태 등 간단한 특성:
단순히 색상 히스토그램이나 윤곽선, 형태 등을 사용해서 간단하게 분류할 수있 다.
복잡하지 않으며 빠르게 결과를 얻을 수 있지만, 정확도는 상대적으로 낮을 수 있다.


==========================================================================================================
b_hist.py,  b_calcHist.py
cv2.calcHist ->히스토그램데이터  : 이미지에서 특정 색상/밝기 레벨의 빈도를 알고 싶을 때, 이미지의 밝기 분포를 분석하고 싶을 때 등.
                  ex)이미지에서 어떤 색이 얼마나 있는지 분석할 때

cv2.equalizeHist-> 회색이미지  :이미지의 대비를 향상시키고 싶을 때, 특히 밝기의 분포가 불균형한 이미지에서 유용
                  ex)  이미지의 대비를 향상

*cv2.calcHist를 사용하여 이미지의 히스토그램을 분석한 뒤, 그 정보를 사용하여 cv2.equalizeHist로 이미지를 개선한다.

======================================================================================================
 << 라벨링된 영역의 생삭정보를 기반으로 유사도를 평가할 때 방법 >>
질문 ) 한개의 이미지내에서  각 라벨링 내의 픽셀의 유사도도 이렇게 히스토그램을 비교하면 가능할까요?
답변 ) 각 라벨링된 영역추출 -> 히스토그램계산  - > 히스토그램 정규화
   -> 정규화된 히스토그램을 사용해서 각 라벨링된 영역간의 유사도를 비교  -> 유사도점수를 기반으로 영역간의 유사성평가

이미지에 여러 객체의 라벨링을 하려면?  connectedComponents()
이미지에 라벨링의 크기를 조정할 때 정보를 리턴받는 함수?
num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(img)
====================================================================================================
특징량
https://www.cs.ubc.ca/~lowe/papers/ijcv04.pdf#page=20

BFMatcher.knnMatch(k=2)에서 2근방 탐색에 의한 매칭을 행하는 경우에 가장 가까운 거리와
2번째에 가까운 거리의 비율이 임계값 이상의 매칭 결과만을 남기는 방법















